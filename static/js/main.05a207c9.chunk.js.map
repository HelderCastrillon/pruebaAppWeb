{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storageRef","ref","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","call","user","setUser","users","setUsers","setData","setAda","collection","doc","values","id","set","first","last","born","sex","console","log","get","then","snapshot","forEach","u","data","nu","push","catch","err","setValues","handleChange","name","event","target","value","handleFile","file","uploadTask","child","put","contentType","on","TaskEvent","STATE_CHANGED","progress","bytesTransferred","totalBytes","state","TaskState","PAUSED","RUNNING","error","code","getDownloadURL","downloadURL","saveImages","files","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","displayName","Avatar","onClick","currentTarget","alt","src","photoURL","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","provider","FacebookAuthProvider","signInWithPopup","result","credential","accessToken","message","email","GoogleAuthProvider","Grid","container","item","xs","TextField","label","onChange","margin","Input","type","accept","Button","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05a207c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\";\nimport Avatar from '@material-ui/core/Avatar'\nimport TextField from '@material-ui/core/TextField'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Input  from '@material-ui/core/Input';\n// Your web app's Firebase configuration\n var firebaseConfig = {\n  apiKey: \"AIzaSyDZNjPo762GKS3e5rczRTARTKit9qhHs38\",\n  authDomain: \"instagram-7952b.firebaseapp.com\",\n  databaseURL: \"https://instagram-7952b.firebaseio.com\",\n  projectId: \"instagram-7952b\",\n  storageBucket: \"instagram-7952b.appspot.com\",\n  messagingSenderId: \"308380519133\",\n  appId: \"1:308380519133:web:4414faa7e81366f9006934\",\n  measurementId: \"G-PGNSX484SM\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n // Get a reference to the storage service, which is used to create references in your storage bucket\n var storage = firebase.storage();\n// Create a storage reference from our storage service\nvar storageRef = storage.ref();\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\nconst [auth, setAuth] = React.useState(true);\nconst [anchorEl, setAnchorEl] = React.useState(null);\nconst open = Boolean(anchorEl);\nvar call=true\nconst handleChange2 = event => {\n  setAuth(event.target.checked);\n};\n\nconst handleMenu = event => {\n  setAnchorEl(event.currentTarget);\n};\n\nconst handleClose = () => {\n  setAnchorEl(null);\n};\n\nfunction saveImages(file){\n// Create the file metadata\nvar metadata = {\n  contentType: 'image/jpeg'\n};\n\n// Upload file and metadata to the object 'images/mountains.jpg'\nvar uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\n\n// Listen for state changes, errors, and completion of the upload.\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n  function(snapshot) {\n    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    console.log('Upload is ' + progress + '% done');\n    switch (snapshot.state) {\n      case firebase.storage.TaskState.PAUSED: // or 'paused'\n        console.log('Upload is paused');\n        break;\n      case firebase.storage.TaskState.RUNNING: // or 'running'\n        console.log('Upload is running');\n        break;\n    }\n  }, function(error) {\n\n  // A full list of error codes is available at\n  // https://firebase.google.com/docs/storage/web/handle-errors\n  switch (error.code) {\n    case 'storage/unauthorized':\n      // User doesn't have permission to access the object\n      break;\n\n    case 'storage/canceled':\n      // User canceled the upload\n      break;\n    case 'storage/unknown':\n      // Unknown error occurred, inspect error.serverResponse\n      break;\n  }\n}, function() {\n  // Upload completed successfully, now we can get the download URL\n  uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n    console.log('File available at', downloadURL);\n  });\n});\n}\n\n  const [user, setUser] = useState(0);\n  const [users, setUsers] = useState([]);\n  function loginGoogle(){\n   \n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then((result)=> {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      setUser(user)\n\n      // ...\n    }).catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  }\n\n  function loginFacebook(){\n    var provider = new firebase.auth.FacebookAuthProvider();\n    firebase.auth().signInWithPopup(provider).then((result)=> {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      setUser(user)\n\n      // ...\n    }).catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  }\nfunction getData(){\n  var db = firebase.firestore();\n  db.collection('users').get()\n  .then((snapshot) => {\n    snapshot.forEach((doc) => {\n      var u=doc.data();\n      var nu=users\n      nu.push(u)\n      setUsers(nu)\n    });\n    call=false\n  })\n  .catch((err) => {\n    console.log('Error getting documents', err);\n  });\n\n}\n//get dataValue from Firebase\nconsole.log(call)\nif(call==true)\n  getData();\n\nfunction setData(){\n  var db = firebase.firestore();\n  let docRef = db.collection('users').doc(values.id);\n  let setAda = docRef.set({\n    first: values.first,\n    last: values.last,\n    born: values.born,\n    sex:values.sex\n  });\n  call=true\n  console.log(setAda)\n}\nconst [values, setValues] = React.useState({\n  id:1,\n  first: 'Adan',\n  last: 'Stark',\n  born: 1,\n  sex: 'Male',\n});\nconst handleChange = name => event => {\n  setValues({ ...values, [name]: event.target.value });\n};\n  function rederForm(){\n    return(\n      <>\n      <TextField\n       error={false}\n        id=\"outlined-name\"\n        label=\"Identification Number\"\n        onChange={handleChange('id')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n       <TextField\n        id=\"outlined-name\"\n        label=\"First Name\"\n        onChange={handleChange('first')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n      <TextField\n        id=\"outlined-name\"\n        label=\"Last Name\"\n        onChange={handleChange('last')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n      <TextField\n        id=\"outlined-name\"\n        label=\"Born\"\n        onChange={handleChange('born')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n      <TextField\n        id=\"outlined-name\"\n        label=\"Sex\"\n        onChange={handleChange('sex')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n      <Input type=\"file\" onChange={handleFile} accept=\"image/jpeg\" />\n      <Button variant=\"contained\" color=\"red\"  onClick={setData}>\n      Guardar Datos de prueba\n      </Button>\n      </>\n    )\n  }\n  function handleFile(event){\n    saveImages(event.target.files[0])\n  }\n  function renderTable(){\n    return(<Paper >\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n             <TableCell align=\"right\">Firt</TableCell>\n            <TableCell align=\"right\">Last</TableCell>\n            <TableCell align=\"right\">Born</TableCell>\n            <TableCell align=\"right\">Sex</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {users.map(row => (\n            <TableRow key={row.first}>\n               <TableCell align=\"right\">{row.first}</TableCell>\n              <TableCell align=\"right\">{row.last}</TableCell>\n              <TableCell align=\"right\">{row.born}</TableCell>\n              <TableCell align=\"right\">{row.sex}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>)\n  }\n\n  return (\n    \n    <div className=\"App\">\n       <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Hola :  {user.displayName}\n          </Typography>\n          {auth && (\n            <div>\n              \n                <Avatar onClick={handleMenu} alt=\"Remy Sharp\" src={user.photoURL} />\n       \n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={loginFacebook}>Login Facebook</MenuItem>\n                <MenuItem onClick={loginGoogle}>Login Google</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n      <header className=\"App-header\">\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n        {rederForm()}\n        </Grid>\n        <Grid item xs={8}>\n        \n        </Grid>\n        </Grid>\n\n      \n     \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}